#!/usr/bin/env python
import os
import subprocess
import sys

from pathlib import Path

CWD = Path(".").resolve()
PROJECT_ROOT = Path(os.path.abspath(os.path.dirname(__file__))) / ".."
SRC_ROOT = PROJECT_ROOT / "bloop"
TEST_ROOT = PROJECT_ROOT / "tests" / "unit"


def run(cmd: str, suppress=False) -> None:
    stdout = subprocess.PIPE if suppress else None
    stderr = subprocess.PIPE if suppress else None
    subprocess.run(cmd, shell=True, universal_newlines=True, stdout=stdout, stderr=stderr)


def clear_coverage() -> None:
    try:
        (PROJECT_ROOT.resolve() / ".coverage").unlink()
    except FileNotFoundError:
        pass


def src_path(name: str) -> Path:
    """stream/shard -> /some/path/bloop/stream/shard.py"""
    path = (SRC_ROOT.resolve() / name).with_suffix(".py")
    try:
        return path.resolve()
    except FileNotFoundError:
        sys.exit("ERROR {} does not exist.".format(path))


def test_path(name: str) -> Path:
    """stream/shard -> /some/path/tests/unit/test_stream/test_shard.py"""
    path = TEST_ROOT.resolve().joinpath(
        # foo / bar -> test_foo / test_bar
        *["test_" + x for x in Path(name).parts]
    ).with_suffix(".py")
    try:
        return path.resolve()
    except FileNotFoundError:
        pass


def run_test(name: str, verbose=False, suppress=False, append=False) -> None:
    src = src_path(name)
    test = test_path(name)

    if not test:
        print(">>> NO COVERAGE FOR {} <<<".format(name))
        return
    template = "coverage run {append} --branch --include={src} -m pytest {test} {verbose}"
    try:
        src = src.relative_to(CWD)
    except ValueError:
        pass
    try:
        test = test.relative_to(CWD)
    except ValueError:
        pass

    cmd = template.format(
        append="--append" if append else "", verbose="-v" if verbose else "",
        src=src, test=test)
    print(cmd)
    run(cmd, suppress=suppress)


if __name__ == "__main__":
    if len(sys.argv) > 2:
        sys.exit("No args to run all tests, or module path to run one suite")

    clear_coverage()

    if len(sys.argv) == 2:
        filename = sys.argv[1]
        run_test(filename, verbose=True)

    else:
        # Suppress output since this is *only* to collect coverage info
        names = [str(p.relative_to(SRC_ROOT)) for p in SRC_ROOT.rglob("*.py") if p.stem != "__init__"]
        for filename in names:
            run_test(filename, suppress=True, append=True)
        print()

    run("coverage report -m")
